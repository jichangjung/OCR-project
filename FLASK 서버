 from flask import Flask, request, jsonify, send_file
import cv2
import numpy as np
from imutils.perspective import four_point_transform
import imutils
import io
from PIL import Image
import os
import base64
import pytesseract
import re
import mysql.connector
from datetime import datetime

app = Flask(__name__)

# MySQL 연결 설정
connection = mysql.connector.connect(
    host="my-rds-instance.cw8g021t58tq.ap-northeast-2.rds.amazonaws.com",
    user="admin",
    password="rlaalswo6380",
    database="projectdb",
    ssl_disabled=True
)
cursor = connection.cursor(dictionary=True)

@app.route('/get_text_file', methods=['GET'])
def get_text_file():
    text_file_path = "images/extracted_text.txt"
    return send_file(text_file_path, as_attachment=True)

@app.route('/upload', methods=['POST'])
def upload_image():
    try:
        # 이미지를 받아오기
        image_file = request.files['image']
        if not image_file:
            return jsonify({"error": "No image uploaded"}), 400

        # 텍스트 파일 초기화 (기존 내용 삭제)
        text_file_path = "images/extracted_text.txt"
        if os.path.exists(text_file_path):
            os.remove(text_file_path)

        # 이미지 저장 경로 설정
        image_path = "images/uploaded_image.jpg"
        image_file.save(image_path)

        # 이미지를 OpenCV 형식으로 읽어오기
        image = cv2.imread(image_path)

        # 이미지 처리
        width = 200
        ksize = (5, 5)
        min_threshold = 20
        max_threshold = 100

        org_image = image.copy()
        image = imutils.resize(image, width=width)
        ratio = org_image.shape[1] / float(image.shape[1])

        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        blurred = cv2.GaussianBlur(gray, ksize, 0)
        edged = cv2.Canny(blurred, min_threshold, max_threshold)

        cnts = cv2.findContours(edged.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        cnts = imutils.grab_contours(cnts)
        cnts = sorted(cnts, key=cv2.contourArea, reverse=True)

        findCnt = None

        for c in cnts:
            peri = cv2.arcLength(c, True)
            approx = cv2.approxPolyDP(c, 0.02 * peri, True)

            if len(approx) == 4:
                findCnt = approx
                break
    
        if findCnt is None:
            return jsonify({"error": "Could not find outline"}), 400

        transform_image = four_point_transform(org_image, findCnt.reshape(4, 2) * ratio)

        img_io = io.BytesIO()
        transform_image = cv2.cvtColor(transform_image, cv2.COLOR_BGR2RGB)
        im = Image.fromarray(transform_image)
        im.save(img_io, 'PNG', quality=70)
        img_io.seek(0)

        text = pytesseract.image_to_string(transform_image, lang='eng+kor')

        # 정규 표현식을 사용하여 이름과 번호 추출
        name = re.findall(r"([가-힣]{1,3}(?:\s[가-힣]{1,3})*)\s+직책", text)
        number = re.findall(r"\d{3}", text)

        if not name or not number:
            return jsonify({"error": "이름 또는 번호를 찾을 수 없습니다"}), 400

        # 추출된 텍스트를 텍스트 파일로 저장
        text_file_path = "images/extracted_text.txt"
        with open(text_file_path, "w", encoding="utf-8") as text_file:
            text_file.write(name[0]+ "\n" + number[0])



        # 데이터베이스에서 해당 이름과 번호로 사용자 확인
        name_to_check = name[0].replace(" ", "")  # 이름에서 공백 제거
        employee_query = "SELECT * FROM EMPLOYEE WHERE name = %s AND no = %s"
        cursor.execute(employee_query, (name_to_check, number[0]))
        result = cursor.fetchall()

        # 데이터베이스에 출근 정보를 삽입
        if result:
            message = f"{name_to_check}님은 데이터베이스에 있습니다."
            print(message)  # 결과를 터미널에 출력

            user_no = result[0]["no"]

            # 작업을 업데이트 또는 추가하기 위한 쿼리
            update_work_query = """
                   UPDATE WORK
                   SET work_off = %s
                   WHERE no = %s AND work_on IS NOT NULL AND work_off IS NULL
               """
            current_time = datetime.now()

            # 이미 이 사용자의 최근 작업이 기록되었는지 확인
            check_recent_work_query = "SELECT work_off FROM WORK WHERE no = %s ORDER BY work_on DESC LIMIT 1"
            cursor.execute(check_recent_work_query, (user_no,))
            recent_work = cursor.fetchone()

            if recent_work and recent_work["work_off"] is None:
                # 사용자의 최근 작업이 아직 종료되지 않았으므로 WORK_OFF 열을 업데이트
                cursor.execute(update_work_query, (current_time, user_no))
            else:
                # 사용자의 최근 작업이 종료되었으므로 새로운 작업을 추가
                insert_work_query = "INSERT INTO WORK (no, work_on) VALUES (%s, %s)"
                cursor.execute(insert_work_query, (user_no, current_time))

            connection.commit()

            response_data = {"message": message, "success": True}
        else:
            message = f"{name_to_check}님은 데이터베이스에 없습니다."
            print(message)  # 결과를 터미널에 출력
            return jsonify({"error": "출퇴근 등록 실패했습니다", "success": False}), 400

        # 이미지를 Base64로 인코딩
        with open(image_path, "rb") as image_file:
            image_data = base64.b64encode(image_file.read()).decode()

        # Base64로 인코딩된 이미지 데이터를 JSON 응답에 추가
        return jsonify(
            {"message": message, "image_data": image_data},response_data)

    except Exception as e:
        print(f"Error: {e}")  # 에러 메시지를 출력하여 디버깅
        return jsonify({"error": "이미지 처리 중 오류가 발생했습니다", "details": str(e)}), 500

if __name__ == '__main__':
    if not os.path.exists("images"):
        os.makedirs("images")
    app.run(host="192.168.0.61", port=8000, debug=True)
